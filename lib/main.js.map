{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nD3F                       = require 'd3-format'\n{ log\n  debug }                 = console\nrpr                       = ( x ) -> ( require 'loupe' ).inspect x\n{ default: width_of, }    = require 'string-width'\n\n\n#===========================================================================================================\ntypes =\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( typename, x ) ->\n    return x if @isa[ typename ] x\n    throw new Effstring_validation_error 'Ωfstr___1', typename, x\n\n  #---------------------------------------------------------------------------------------------------------\n  isa:\n    # list:               ( x ) -> Array.isArray  x\n    # object:             ( x ) -> x? and x instanceof Object\n    function: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    pod:      ( x ) -> x? and x.constructor in [ Object, undefined, ]\n    text:     ( x ) -> ( typeof x ) is 'string'\n    bcp47:    ( x ) ->\n      return false unless @text x\n      return /^[a-z]{2}-(?:[0-9]{3}|[A-Z]{2})$/.test x\n\n\n#===========================================================================================================\nclass Effstring_error extends Error\n  constructor: ( ref, message, cause = null ) ->\n    super()\n    @cause = cause if cause?\n    if ref is null\n      @message  = message\n      return undefined\n    @message  = \"#{ref} (#{@constructor.name}) #{message}\"\n    @ref      = ref\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_syntax_error extends Effstring_error\n  constructor: ( ref, part, message = null, cause = null ) ->\n    message ?= \"illegal format expression #{rpr part}\"\n    super ref, message, cause\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_lib_syntax_error extends Effstring_syntax_error\n  constructor: ( ref, part, cause ) ->\n    super ref, part, \"illegal format expression #{rpr part}\", cause\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_syntax_fillwidth_error extends Effstring_syntax_error\n  constructor: ( ref, fmt_spec, fill ) ->\n    super ref, null, \"illegal format expression #{rpr fmt_spec}: fill #{rpr fill} must be single-width BMP character\"\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_validation_error extends Effstring_error\n  constructor: ( ref, typename, x ) ->\n    super ref, \"expected a #{typename} got #{rpr x}\"\n\n\n#===========================================================================================================\n_default_locale =\n  decimal:    '.'\n  thousands:  ','\n  grouping:   [ 3, ]\n  currency:   [ '$', '', ]\n  numerals:   [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ]\n  percent:    '%'\n  minus:      '−' # U+2212\n  nan:        'NaN'\n  fullwidth:  true\n\n#===========================================================================================================\n_locale_cfg_from_bcp47 = ( bcp47 ) ->\n  types.validate 'bcp47', bcp47\n  return require \"d3-format/locale/#{bcp47}\"\n\n#---------------------------------------------------------------------------------------------------------\n_hint_as_locale_cfg = ( hint ) ->\n  return _locale_cfg_from_bcp47  hint if types.isa.text hint\n  return                         hint if types.isa.pod  hint\n  throw new Effstring_validation_error 'Ωfstr___2', \"text or object\", hint\n\n#---------------------------------------------------------------------------------------------------------\n_locale_cfg_from_hints = ( hints... ) ->\n  return Object.assign {}, _default_locale, ( ( _hint_as_locale_cfg hint ) for hint in hints )...\n\n#===========================================================================================================\n_fmtspec_re = ///\n  ^:\n  (?<fmt_spec>;?[^;]+);\n  (?<tail>.*)\n  $\n  ///\n\n#-----------------------------------------------------------------------------------------------------------\n_escape_regex = ( text ) ->\n  return text.replace ///[/\\-\\\\^$*+?.()|[\\]{}]///g, '\\\\$&'\n  # return text.replace ///[.*+?^${}()|[\\\\]\\\\\\\\]///g, '\\\\\\\\$&'\n\n#-----------------------------------------------------------------------------------------------------------\n_to_width = ( text, fmt_cfg ) ->\n  ### TAINT assuming fmt_cfg.fill has length 1, but could be any length ###\n  switch fmt_cfg.align\n    #.......................................................................................................\n    when '<'\n      while ( text.endsWith fmt_cfg.fill ) and ( width_of text ) > fmt_cfg.width\n        text = text[ ... text.length - 1 ]\n    #.......................................................................................................\n    when '>'\n      while ( text.startsWith fmt_cfg.fill ) and ( width_of text ) > fmt_cfg.width\n        text = text[ 1 ... ]\n    #.......................................................................................................\n    when '^'\n      p = 0\n      loop\n        break unless ( width_of text ) > fmt_cfg.width\n        p++\n        if ( p %% 2 ) is 0\n          if text.startsWith fmt_cfg.fill       then text = text[ 1 ... ]\n          else if text.endsWith fmt_cfg.fill    then text = text[ ... text.length - 1 ]\n        else\n          if text.endsWith fmt_cfg.fill         then text = text[ ... text.length - 1 ]\n          else if text.startsWith fmt_cfg.fill  then text = text[ 1 ... ]\n    #.......................................................................................................\n    when '='\n      break unless ( width_of text ) > fmt_cfg.width\n      fill_re = _escape_regex fmt_cfg.fill\n      matcher = /// ^ ( [^ #{fill_re} ]* ) #{fill_re} /// ### TAINT use unicode flag? ###\n      loop\n        shorter_text = text.replace matcher, '$1'\n        break if text is shorter_text\n        text = shorter_text\n        break unless ( width_of text ) > fmt_cfg.width\n  #.........................................................................................................\n  return text\n\n#-----------------------------------------------------------------------------------------------------------\nnew_ftag = ( hints... ) ->\n  locale_cfg  = _locale_cfg_from_hints hints...\n  format_fn   = ( D3F.formatLocale locale_cfg ).format\n  return ( parts, expressions... ) ->\n    R = parts[ 0 ]\n    for value, idx in expressions\n      part    = parts[ idx + 1 ]\n      #.....................................................................................................\n      if part.startsWith ':'\n        unless ( match = part.match _fmtspec_re )?\n          throw new Effstring_syntax_error 'Ωfstr___3', part\n        { fmt_spec, tail, } = match.groups\n        try literal = ( ( format_fn fmt_spec ) value ) catch error\n          throw new Effstring_lib_syntax_error 'Ωfstr___4', fmt_spec, error\n        if locale_cfg.fullwidth and ( fmt_cfg = D3F.formatSpecifier fmt_spec ).width?\n          unless ( width_of fmt_cfg.fill ) is 1\n            throw new Effstring_syntax_fillwidth_error 'Ωfstr___5', fmt_spec, fmt_cfg.fill\n          literal = _to_width literal, fmt_cfg\n        R += literal + tail\n      #.....................................................................................................\n      else\n        literal = if ( typeof value is 'string' ) then value else rpr value\n        R      += literal + part\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n# f = new_ftag D3F.format\nf = new_ftag 'en-US'\n\n\n\n#===========================================================================================================\nmodule.exports = {\n  f,\n  new_ftag,\n  Effstring_error,\n  Effstring_syntax_error,\n  Effstring_lib_syntax_error,\n  Effstring_syntax_fillwidth_error,\n  Effstring_validation_error,\n  _d3_format: D3F,\n  _default_locale,\n  _hint_as_locale_cfg,\n  _locale_cfg_from_bcp47,\n  _fmtspec_re,\n  _locale_cfg_from_hints, }\n\n\n"
  ]
}