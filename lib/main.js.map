{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,eAAA,EAAA,0BAAA,EAAA,sBAAA,EAAA,0BAAA,EAAA,WAAA,EAAA,sBAAA,EAAA,mBAAA,EAAA,sBAAA,EAAA,CAAA,EAAA,GAAA,EAAA,QAAA,EAAA,GAAA,EAAA,KAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAA5B;;EACA,GAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC,OAAnB,CAA2B,CAA3B;EAAT,EAL5B;;;EASA,KAAA,GAGE,CAAA;;IAAA,QAAA,EAAU,QAAA,CAAE,QAAF,EAAY,CAAZ,CAAA;MACR,IAAY,IAAC,CAAA,GAAG,CAAE,QAAF,CAAJ,CAAiB,CAAjB,CAAZ;AAAA,eAAO,EAAP;;MACA,MAAM,IAAI,0BAAJ,CAA+B,WAA/B,EAA4C,QAA5C,EAAsD,CAAtD;IAFE,CAAV;;IAKA,GAAA,EAGE,CAAA;;;MAAA,QAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC,CAAV;MACA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;AAAQ,YAAA;eAAC,WAAA,aAAO,CAAC,CAAC,iBAAiB,UAAnB,SAA2B;MAA3C,CADV;MAEA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB,CAFV;MAGA,KAAA,EAAU,QAAA,CAAE,CAAF,CAAA;QACR,KAAoB,IAAC,CAAA,IAAD,CAAM,CAAN,CAApB;AAAA,iBAAO,MAAP;;AACA,eAAO,kCAAkC,CAAC,IAAnC,CAAwC,CAAxC;MAFC;IAHV;EARF,EAZF;;;EA6BM,kBAAN,MAAA,gBAAA,QAA8B,MAA9B;IACE,WAAa,CAAE,GAAF,EAAO,OAAP,CAAA;WACX,CAAA;MACA,IAAG,GAAA,KAAO,IAAV;QACE,IAAC,CAAA,OAAD,GAAY;AACZ,eAAO,OAFT;;MAGA,IAAC,CAAA,OAAD,GAAY,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,IAAC,CAAA,WAAW,CAAC,IAAxB,CAAA,EAAA,CAAA,CAAiC,OAAjC,CAAA;MACZ,IAAC,CAAA,GAAD,GAAY;AACZ,aAAO;IAPI;;EADf,EA7BA;;;EAwCM,yBAAN,MAAA,uBAAA,QAAqC,gBAArC;IACE,WAAa,CAAE,GAAF,EAAO,IAAP,EAAa,OAAb,CAAA;WAA0B,CAAM,GAAN,oBAAW,UAAU,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,IAAJ,CAA7B,CAAA,CAArB;IAA1B;;EADf,EAxCA;;;EA4CM,6BAAN,MAAA,2BAAA,QAAyC,uBAAzC;IACE,WAAa,CAAE,GAAF,EAAO,IAAP,EAAa,KAAb,CAAA;WACX,CAAM,GAAN,EAAW,IAAX,EAAiB,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,IAAJ,CAA7B,CAAA,mBAAA,CAAA,CAA2D,KAAK,CAAC,KAAjE,CAAA,CAAjB;IADW;;EADf,EA5CA;;;EAiDM,6BAAN,MAAA,2BAAA,QAAyC,gBAAzC;IACE,WAAa,CAAE,GAAF,EAAO,QAAP,EAAiB,CAAjB,CAAA;WACX,CAAM,GAAN,EAAW,CAAA,WAAA,CAAA,CAAc,QAAd,CAAA,KAAA,CAAA,CAA8B,GAAA,CAAI,CAAJ,CAA9B,CAAA,CAAX;IADW;;EADf,EAjDA;;;EAuDA,sBAAA,GAAyB,QAAA,CAAE,KAAF,CAAA;IACvB,KAAK,CAAC,QAAN,CAAe,OAAf,EAAwB,KAAxB;AACA,WAAO,OAAA,CAAQ,CAAA,iBAAA,CAAA,CAAoB,KAApB,CAAA,CAAR;EAFgB,EAvDzB;;;EA4DA,mBAAA,GAAsB,QAAA,CAAE,IAAF,CAAA;IACpB,IAAuC,KAAK,CAAC,GAAG,CAAC,IAAV,CAAe,IAAf,CAAvC;AAAA,aAAO,sBAAA,CAAwB,IAAxB,EAAP;;IACA,IAAuC,KAAK,CAAC,GAAG,CAAC,GAAV,CAAe,IAAf,CAAvC;AAAA,aAA+B,KAA/B;;IACA,MAAM,IAAI,0BAAJ,CAA+B,WAA/B,EAA4C,gBAA5C,EAA8D,IAA9D;EAHc,EA5DtB;;;EAkEA,sBAAA,GAAyB,QAAA,CAAA,GAAE,KAAF,CAAA;AACzB,QAAA;AAAE,WAAO,MAAM,CAAC,MAAP,CAAc,CAAA,CAAd,EAAkB,GAAA;;AAAE;MAAA,KAAA,uCAAA;;qBAAE,mBAAA,CAAoB,IAApB;MAAF,CAAA;;QAAF,CAAlB;EADgB,EAlEzB;;;EAsEA,WAAA,GAAc,qCAtEd;;;EA8EA,QAAA,GAAW,QAAA,CAAA,GAAE,KAAF,CAAA;AACX,QAAA;IAAE,SAAA,GAAY,CAAE,GAAG,CAAC,YAAJ,CAAiB,sBAAA,CAAuB,GAAA,KAAvB,CAAjB,CAAF,CAAoD,CAAC;AACjE,WAAO,QAAA,CAAE,KAAF,EAAA,GAAS,WAAT,CAAA;AACT,UAAA,CAAA,EAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA;MAAI,CAAA,GAAI,KAAK,CAAE,CAAF;MACT,KAAA,yDAAA;;QACE,IAAA,GAAU,KAAK,CAAE,GAAA,GAAM,CAAR,EAArB;;QAEM,IAAG,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAH;UACE,IAAO,yCAAP;YACE,MAAM,IAAI,sBAAJ,CAA2B,WAA3B,EAAwC,IAAxC,EADR;;UAEA,CAAA,CAAE,OAAF,EAAW,IAAX,CAAA,GAAqB,KAAK,CAAC,MAA3B;AACA;YAAI,CAAA,IAAM,CAAE,CAAE,SAAA,CAAU,OAAV,CAAF,CAAA,CAAsB,KAAtB,CAAF,CAAA,GAAkC,KAA5C;WAAiD,cAAA;YAAM;YACrD,MAAM,IAAI,0BAAJ,CAA+B,WAA/B,EAA4C,OAA5C,EAAqD,KAArD,EADyC;WAJnD;SAAA,MAAA;;UAQE,OAAA,GAAa,CAAE,OAAO,KAAP,KAAgB,QAAlB,CAAH,GAAqC,KAArC,GAAgD,GAAA,CAAI,KAAJ;UAC1D,CAAA,IAAU,OAAA,GAAU,KATtB;;MAHF;AAaA,aAAO;IAfF;EAFE,EA9EX;;;;EAmGA,CAAA,GAAI,QAAA,CAAS,OAAT,EAnGJ;;;EAwGA,MAAM,CAAC,OAAP,GAAiB;IACf,CADe;IAEf,QAFe;IAGf,UAAA,EAAY,GAHG;IAIf,mBAJe;IAKf,sBALe;IAMf,WANe;IAOf,sBAPe;IAQf,eARe;IASf,sBATe;IAUf;EAVe;AAxGjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nD3F                       = require 'd3-format'\n{ log }                   = console\nrpr                       = ( x ) -> ( require 'util' ).inspect x\n\n\n#===========================================================================================================\ntypes =\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( typename, x ) ->\n    return x if @isa[ typename ] x\n    throw new Effstring_validation_error '立fstr___1', typename, x\n\n  #---------------------------------------------------------------------------------------------------------\n  isa:\n    # list:               ( x ) -> Array.isArray  x\n    # object:             ( x ) -> x? and x instanceof Object\n    function: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    pod:      ( x ) -> x? and x.constructor in [ Object, undefined, ]\n    text:     ( x ) -> ( typeof x ) is 'string'\n    bcp47:    ( x ) ->\n      return false unless @text x\n      return /^[a-z]{2}-(?:[0-9]{3}|[A-Z]{2})$/.test x\n\n\n#===========================================================================================================\nclass Effstring_error extends Error\n  constructor: ( ref, message ) ->\n    super()\n    if ref is null\n      @message  = message\n      return undefined\n    @message  = \"#{ref} (#{@constructor.name}) #{message}\"\n    @ref      = ref\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_syntax_error extends Effstring_error\n  constructor: ( ref, part, message ) -> super ref, message ? \"illegal format expression #{rpr part}\"\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_lib_syntax_error extends Effstring_syntax_error\n  constructor: ( ref, part, error ) ->\n    super ref, part, \"illegal format expression #{rpr part};\\norginal error:\\n#{error.stack}\"\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_validation_error extends Effstring_error\n  constructor: ( ref, typename, x ) ->\n    super ref, \"expected a #{typename} got #{rpr x}\"\n\n\n#===========================================================================================================\n_locale_cfg_from_bcp47 = ( bcp47 ) ->\n  types.validate 'bcp47', bcp47\n  return require \"d3-format/locale/#{bcp47}\"\n\n#---------------------------------------------------------------------------------------------------------\n_hint_as_locale_cfg = ( hint ) ->\n  return _locale_cfg_from_bcp47  hint if types.isa.text hint\n  return                         hint if types.isa.pod  hint\n  throw new Effstring_validation_error '立fstr___4', \"text or object\", hint\n\n#---------------------------------------------------------------------------------------------------------\n_format_cfg_from_hints = ( hints... ) ->\n  return Object.assign {}, ( ( _hint_as_locale_cfg hint ) for hint in hints )...\n\n#===========================================================================================================\n_fmtspec_re = ///\n  ^:\n  (?<fmtspec>;?[^;]+);\n  (?<tail>.*)\n  $\n  ///\n\n#---------------------------------------------------------------------------------------------------------\nnew_ftag = ( hints... ) ->\n  format_fn = ( D3F.formatLocale _format_cfg_from_hints hints... ).format\n  return ( parts, expressions... ) ->\n    R = parts[ 0 ]\n    for value, idx in expressions\n      part    = parts[ idx + 1 ]\n      #.....................................................................................................\n      if part.startsWith ':'\n        unless ( match = part.match _fmtspec_re )?\n          throw new Effstring_syntax_error '立fstr___2', part\n        { fmtspec, tail, } = match.groups\n        try R  += ( ( format_fn fmtspec ) value ) + tail catch error\n          throw new Effstring_lib_syntax_error '立fstr___3', fmtspec, error\n      #.....................................................................................................\n      else\n        literal = if ( typeof value is 'string' ) then value else rpr value\n        R      += literal + part\n    return R\n\n#---------------------------------------------------------------------------------------------------------\n# f = new_ftag D3F.format\nf = new_ftag 'en-US'\n\n\n\n#===========================================================================================================\nmodule.exports = {\n  f,\n  new_ftag,\n  _d3_format: D3F,\n  _hint_as_locale_cfg,\n  _locale_cfg_from_bcp47\n  _fmtspec_re,\n  _format_cfg_from_hints,\n  Effstring_error,\n  Effstring_syntax_error,\n  Effstring_lib_syntax_error, }\n\n\n"
  ]
}