{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,sBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,GAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,GAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,OAAA,CAAQ,MAAR,CAAF,CAAkB,CAAC,OAAnB,CAA2B,CAA3B;EAAT,EAJ5B;;;EAQM,IAAC,CAAA,kBAAP,MAAA,gBAAA,QAA+B,MAA/B;IACE,WAAa,CAAE,GAAF,EAAO,OAAP,CAAA;WACX,CAAA;MACA,IAAG,GAAA,KAAO,IAAV;QACE,IAAC,CAAA,OAAD,GAAY;AACZ,eAAO,OAFT;;MAGA,IAAC,CAAA,OAAD,GAAY,CAAA,CAAA,CAAG,GAAH,CAAA,EAAA,CAAA,CAAW,IAAC,CAAA,WAAW,CAAC,IAAxB,CAAA,EAAA,CAAA,CAAiC,OAAjC,CAAA;MACZ,IAAC,CAAA,GAAD,GAAY;AACZ,aAAO;IAPI;;EADf,EARA;;;EAmBM,yBAAN,MAAA,uBAAA,QAAqC,IAAC,CAAA,gBAAtC;IACE,WAAa,CAAE,GAAF,EAAO,IAAP,CAAA;WAAiB,CAAM,GAAN,EAAW,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,IAAJ,CAA7B,CAAA,CAAX;IAAjB;;EADf,EAnBA;;;EAwBA,SAAA,GAAY,oCAxBZ;;;EAgCA,CAAA,GAAI,QAAA,CAAE,KAAF,EAAA,GAAS,WAAT,CAAA;AACJ,QAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAE,CAAA,GAAI,KAAK,CAAE,CAAF;IACT,KAAA,yDAAA;;MACE,IAAA,GAAU,KAAK,CAAE,GAAA,GAAM,CAAR,EAAnB;;MAEI,IAAG,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAH;QACE,IAAO,uCAAP;UACE,MAAM,IAAI,sBAAJ,CAA2B,OAA3B,EAAoC,IAApC,EADR;;QAEA,CAAA,CAAE,GAAF,EAAO,IAAP,CAAA,GAAiB,KAAK,CAAC,MAAvB;QACA,GAAA,GAAM,GAAG,CAAC,OAAJ,CAAY,MAAZ,EAAoB,GAApB;QACN,CAAA,IAAM,CAAE,CAAE,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAF,CAAA,CAAmB,KAAnB,CAAF,CAAA,GAA+B,KALvC;OAAA,MAAA;;QAQE,OAAA,GAAa,CAAE,OAAO,KAAP,KAAgB,QAAlB,CAAH,GAAqC,KAArC,GAAgD,GAAA,CAAI,KAAJ;QAC1D,CAAA,IAAU,OAAA,GAAU,KATtB;;IAHF;AAaA,WAAO;EAfL,EAhCJ;;;EAmDA,MAAM,CAAC,OAAP,GAAiB,CAAE,CAAF;AAnDjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nD3F                       = require 'd3-format'\nrpr                       = ( x ) -> ( require 'util' ).inspect x\n\n\n#===========================================================================================================\nclass @Effstring_error extends Error\n  constructor: ( ref, message ) ->\n    super()\n    if ref is null\n      @message  = message\n      return undefined\n    @message  = \"#{ref} (#{@constructor.name}) #{message}\"\n    @ref      = ref\n    return undefined\n\n#-----------------------------------------------------------------------------------------------------------\nclass Effstring_syntax_error extends @Effstring_error\n  constructor: ( ref, part ) -> super ref, \"illegal format expression #{rpr part}\"\n\n\n#===========================================================================================================\nformat_re = ///\n  ^:\n  (?<fmt>.+?(?<!\\\\));\n  (?<tail>.*)\n  $\n  ///\n\n#---------------------------------------------------------------------------------------------------------\nf = ( parts, expressions... ) ->\n  R = parts[ 0 ]\n  for value, idx in expressions\n    part    = parts[ idx + 1 ]\n    #.....................................................................................................\n    if part.startsWith ':'\n      unless ( match = part.match format_re )?\n        throw new Effstring_syntax_error 'Î©___1', part\n      { fmt, tail, } = match.groups\n      fmt = fmt.replace /\\\\;/g, ';'\n      R  += ( ( D3F.format fmt ) value ) + tail\n    #.....................................................................................................\n    else\n      literal = if ( typeof value is 'string' ) then value else rpr value\n      R      += literal + part\n  return R\n\n\n#===========================================================================================================\nmodule.exports = { f, }\n\n\n"
  ]
}